


ALGORITHM Automate
VAR
    c : CHAR;
    state: INTEGER:= 0;
    p_ent,p_dec : INTEGER
BEGIN
    
    while(state<>4 && state <> 5){
        read(c)
        SWITCH (state) DO
            case 0 : IF (c=' ') THEN
                state:=0
            ELSE_IF (isDigit(c)) THEN
                state:=1
                p_ent:= Integer(c)
            ELSE
                state:=5
            END_IF
            case 1 : IF (isDigit(c)) THEN
                state:=1
                p_ent:=p_ent*10+Integer(c)
            ELSE_IF (c=".") THEN
                state:=2
            ELSE_IF (c="#") THEN
                state:=4
            ELSE
                state:=5
            END_IF
            case 2 : IF (isDigit(c)) THEN
                state:=3
                p_dec:=Integer(c)
            ELSE
                state:=5
            END_IF
            case 3 : IF (isDigit(c)) THEN
                state:=3
                p_dec=p_dec*10+INteger(c)
            ELSE_IF (c="#") THEN
                state:=4
            ELSE
                state:=5
            END_IF
            
        END_SWITCH
    }
    IF (state==4) THEN
        write("expression valide",p_ent,p_dec)
    ELSE
        write("expression non valide")
    END_IF

END




































ALGORITHM Automate
VAR
    state : INTEGER := 0;
    c : CHAR;
    p_ent,p_dec : INTEGER;
BEGIN
    WHILE (state<>4 OR state<>5) DO
        Write('enter the character ')
                Read(c)
        SWITCH (state) DO
            case 0 : IF (isDigit(c)) THEN
                state:=1;
                p_ent:=toInteger(c);
            ELSE_IF (c=" ") THEN
                state:=0
            ELSE
                state:=5
            END_IF
            case 1 : IF (isDigit(c)) THEN
                state:=1;
                p_ent:=p_ent*10+toInteger(c)
            ELSE_IF (c=".") THEN
                state:=2
             ELSE_IF (c="#") THEN
                state:=4
            ELSE
                state:=5
            END_IF
            case 2 : IF (isDigit(c)) THEN
                state:=3
                p_dec:=toInteger(c)
            ELSE
                state:=5
            END_IF
            case 3 : IF (isDigit(c)) THEN
                state:=3;
                p_dec:=p_dec*10+toInteger(c)
            ELSE_IF (c="#") THEN
                state:=4
            ELSE
                state:=5
            END_IF
        END_SWITCH
    END_WHILE
    IF (state=4) THEN
        write("valid expression ")
        write(p_ent);
        write(p_dec)
    ELSE
        write(" non valid expression ")
    END_IF


END